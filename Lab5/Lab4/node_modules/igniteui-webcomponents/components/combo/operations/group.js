import { groupBy } from '../../common/util.js';
export default class GroupDataOperation {
    constructor() {
        this.orderBy = new Map(Object.entries({
            asc: 1,
            desc: -1,
        }));
    }
    resolveValue(record, key) {
        return record[key];
    }
    compareValues(first, second) {
        if (typeof first === 'string' && typeof second === 'string') {
            return first.localeCompare(second);
        }
        return first > second ? 1 : first < second ? -1 : 0;
    }
    compareObjects(first, second, key, direction) {
        const [a, b] = [
            this.resolveValue(first, key),
            this.resolveValue(second, key),
        ];
        return this.orderBy.get(direction) * this.compareValues(a, b);
    }
    apply(data, controller) {
        const { groupingOptions: { groupKey, valueKey, displayKey, direction }, } = controller;
        if (!groupKey)
            return data;
        const groups = Object.entries(groupBy(data, (item) => item.value[groupKey] ?? 'Other'));
        return groups.flatMap(([group, items]) => {
            items.sort((a, b) => this.compareObjects(a.value, b.value, displayKey, direction));
            items.unshift({
                dataIndex: -1,
                header: true,
                value: {
                    [valueKey]: group,
                    [displayKey]: group,
                    [groupKey]: group,
                },
            });
            return items;
        });
    }
}
//# sourceMappingURL=group.js.map