{"version":3,"file":"group.js","sourceRoot":"","sources":["../../../../src/components/combo/operations/group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAI/C,MAAM,CAAC,OAAO,OAAO,kBAAkB;IAAvC;QACY,YAAO,GAAG,IAAI,GAAG,CACzB,MAAM,CAAC,OAAO,CAAC;YACb,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC,CAAC;SACT,CAAC,CACH,CAAC;IAwDJ,CAAC;IAtDW,YAAY,CAAC,MAAS,EAAE,GAAY;QAC5C,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAES,aAAa,CAAC,KAAgB,EAAE,MAAiB;QACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC5D,OAAO,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAES,cAAc,CACtB,KAAQ,EACR,MAAS,EACT,GAAY,EACZ,SAA4B;QAE5B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG;YACb,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC;SAC/B,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAE,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,KAAK,CAAC,IAAsB,EAAE,UAA6B;QAChE,MAAM,EACJ,eAAe,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,GAC/D,GAAG,UAAU,CAAC;QAEf,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC;QAE3B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAC3B,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,CACzD,CAAC;QAEF,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;YACvC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAClB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,UAAW,EAAE,SAAS,CAAC,CAC9D,CAAC;YAEF,KAAK,CAAC,OAAO,CAAC;gBACZ,SAAS,EAAE,CAAC,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE;oBACL,CAAC,QAAmB,CAAC,EAAE,KAAK;oBAC5B,CAAC,UAAqB,CAAC,EAAE,KAAK;oBAC9B,CAAC,QAAmB,CAAC,EAAE,KAAK;iBACxB;aACP,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { groupBy } from '../../common/util.js';\nimport { DataController } from '../controllers/data.js';\nimport type { ComboRecord, GroupingDirection, Keys, Values } from '../types.js';\n\nexport default class GroupDataOperation<T extends object> {\n  protected orderBy = new Map(\n    Object.entries({\n      asc: 1,\n      desc: -1,\n    })\n  );\n\n  protected resolveValue(record: T, key: Keys<T>) {\n    return record[key];\n  }\n\n  protected compareValues(first: Values<T>, second: Values<T>) {\n    if (typeof first === 'string' && typeof second === 'string') {\n      return first.localeCompare(second);\n    }\n    return first > second ? 1 : first < second ? -1 : 0;\n  }\n\n  protected compareObjects(\n    first: T,\n    second: T,\n    key: Keys<T>,\n    direction: GroupingDirection\n  ) {\n    const [a, b] = [\n      this.resolveValue(first, key),\n      this.resolveValue(second, key),\n    ];\n\n    return this.orderBy.get(direction)! * this.compareValues(a, b);\n  }\n\n  public apply(data: ComboRecord<T>[], controller: DataController<T>) {\n    const {\n      groupingOptions: { groupKey, valueKey, displayKey, direction },\n    } = controller;\n\n    if (!groupKey) return data;\n\n    const groups = Object.entries(\n      groupBy(data, (item) => item.value[groupKey] ?? 'Other')\n    );\n\n    return groups.flatMap(([group, items]) => {\n      items.sort((a, b) =>\n        this.compareObjects(a.value, b.value, displayKey!, direction)\n      );\n\n      items.unshift({\n        dataIndex: -1,\n        header: true,\n        value: {\n          [valueKey as Keys<T>]: group,\n          [displayKey as Keys<T>]: group,\n          [groupKey as Keys<T>]: group,\n        } as T,\n      });\n\n      return items;\n    });\n  }\n}\n"]}