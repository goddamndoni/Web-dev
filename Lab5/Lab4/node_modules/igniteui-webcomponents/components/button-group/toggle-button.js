var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html } from 'lit';
import { property, query } from 'lit/decorators.js';
import { styles } from './themes/button.base.css.js';
import { all } from './themes/button.js';
import { styles as shared } from './themes/shared/button/button.common.css.js';
import { themes } from '../../theming/theming-decorator.js';
import { registerComponent } from '../common/definitions/register.js';
let IgcToggleButtonComponent = class IgcToggleButtonComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.disabled = false;
    }
    static register() {
        registerComponent(this);
    }
    focus(options) {
        this._nativeButton.focus(options);
    }
    blur() {
        this._nativeButton.blur();
    }
    click() {
        this._nativeButton.click();
    }
    render() {
        return html `
      <button
        part="toggle"
        type="button"
        ?disabled=${this.disabled}
        .ariaLabel=${this.ariaLabel}
        aria-pressed=${this.selected}
        aria-disabled=${this.disabled}
      >
        <slot></slot>
      </button>
    `;
    }
};
IgcToggleButtonComponent.styles = [styles, shared];
IgcToggleButtonComponent.tagName = 'igc-toggle-button';
IgcToggleButtonComponent.shadowRootOptions = {
    ...LitElement.shadowRootOptions,
    delegatesFocus: true,
};
__decorate([
    query('[part="toggle"]', true)
], IgcToggleButtonComponent.prototype, "_nativeButton", void 0);
__decorate([
    property()
], IgcToggleButtonComponent.prototype, "value", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcToggleButtonComponent.prototype, "selected", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcToggleButtonComponent.prototype, "disabled", void 0);
IgcToggleButtonComponent = __decorate([
    themes(all, true)
], IgcToggleButtonComponent);
export default IgcToggleButtonComponent;
//# sourceMappingURL=toggle-button.js.map