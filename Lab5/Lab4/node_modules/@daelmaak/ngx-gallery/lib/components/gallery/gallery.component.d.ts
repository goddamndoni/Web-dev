import { ElementRef, EventEmitter, OnChanges, TemplateRef } from '@angular/core';
import { Aria, ContentTemplateContext, GalleryItem, GalleryItemEvent, ItemTemplateContext, Loading, ObjectFit, Orientation, OrientationFlag, ThumbTemplateContext, VerticalOrientation } from '../../core';
import { StrictSimpleChanges } from '../../core/ng';
import { ThumbsComponent } from '../thumbs/thumbs.component';
import { ViewerComponent } from '../viewer/viewer.component';
import * as i0 from "@angular/core";
export declare class GalleryComponent implements OnChanges {
    /**
     * Gallery items to display
     */
    items: GalleryItem[];
    /**
     * Initially selected item, 0-based
     */
    selectedIndex: number;
    /**
     * Aria labels
     */
    aria: Aria;
    /**
     * Show left and right icons to navigate between images in the viewer
     */
    arrows: boolean;
    /**
     * Displayes item descriptions if any are present in `GalleryItem`
     */
    descriptions: boolean;
    /**
     * Text to be shown when media loading failed
     */
    errorText?: string;
    /**
     * Display an error when the media contained in gallery item failed to load.
     */
    showErrors: boolean;
    /**
     * Allow mouse swipes
     */
    mouseGestures: boolean;
    /**
     * Allow touch swipes
     */
    touchGestures: boolean;
    /**
     * Controls whether items outside gallery's scrollport should overflow it. When clip == false,
     * items overflowing the gallery will be visible on both sides. Otherwise they will be hidden
     * with `overflow: hidden`.
     */
    clip: boolean;
    /**
     * Show item counter in the slider area
     */
    counter: boolean;
    counterOrientation: VerticalOrientation;
    /**
     * Either makes images load eagerly or lazily. The lazy loading is managed by the browser itself.
     */
    loading: Loading;
    /**
     * Turns on infinite looping for swiping and arrows navigation.
     */
    loop: boolean;
    /**
     * The way an image or video should fill its container.
     */
    objectFit: ObjectFit;
    /**
     * Right to left mode
     */
    isRtl: boolean;
    /**
     * How many items are visible in the scrollport.
     */
    visibleItems: number;
    /**
     * By how many items the slider shifts when user navigates with arrows.
     */
    moveByItems: number;
    /**
     * Custom template for gallery items.
     */
    itemTemplate?: TemplateRef<ItemTemplateContext>;
    /**
     * Custom item template for media that failed to load
     */
    errorTemplate?: TemplateRef<any>;
    /**
     * Custom template for navigation arrows for the slider.
     */
    arrowTemplate?: TemplateRef<any>;
    /**
     * Custom template whose content appears in the gallery viewer.
     */
    contentTemplate?: TemplateRef<ContentTemplateContext>;
    /**
     * Show thumbnail list.
     */
    thumbs: boolean;
    /**
     * Scroll thumbnails automatically as you navigate in image viewer.
     */
    thumbsAutoScroll: boolean;
    /**
     * Where thumbnails will be placed in relation to slider.
     */
    thumbsOrientation: Orientation;
    /**
     * Show arrows to navigate thumbnails.
     */
    thumbsArrows: boolean;
    /**
     * By how far in pixels the thumbnails are scrolled when using arrows.
     */
    thumbsArrowSlideByLength?: number;
    /**
     * Smooth or instant navigation in thumbnails.
     */
    thumbsScrollBehavior: ScrollBehavior;
    /**
     * Custom template for thumbnail items.
     */
    thumbTemplate?: TemplateRef<ThumbTemplateContext>;
    /**
     * Custom template for navigation arrows in thumbnail list.
     */
    thumbsArrowTemplate?: TemplateRef<never>;
    /**
     * Custom template for thumbnails that failed to load.
     */
    thumbErrorTemplate?: TemplateRef<never>;
    itemClick: EventEmitter<GalleryItemEvent>;
    thumbClick: EventEmitter<GalleryItemEvent>;
    thumbHover: EventEmitter<GalleryItemEvent>;
    descriptionClick: EventEmitter<Event>;
    /**
     * Triggers when item or group of items gets selected, ie. they get displayed in scrollport.
     */
    selection: EventEmitter<GalleryItem>;
    _viewerRef: ViewerComponent;
    _thumbsRef?: ThumbsComponent;
    _viewerElRef: ElementRef<HTMLElement>;
    get _galleryColumn(): boolean;
    get _thumbsOrientationFlag(): OrientationFlag;
    ngOnChanges({ items }: StrictSimpleChanges<GalleryComponent>): void;
    focus(): void;
    next(): void;
    prev(): void;
    select(index: number): void;
    slideThumbs(direction: number): void;
    _onThumbClick(event: GalleryItemEvent): void;
    _selectInternal(index: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryComponent, "gallery", never, { "items": { "alias": "items"; "required": false; }; "selectedIndex": { "alias": "selectedIndex"; "required": false; }; "aria": { "alias": "aria"; "required": false; }; "arrows": { "alias": "arrows"; "required": false; }; "descriptions": { "alias": "descriptions"; "required": false; }; "errorText": { "alias": "errorText"; "required": false; }; "showErrors": { "alias": "showErrors"; "required": false; }; "mouseGestures": { "alias": "mouseGestures"; "required": false; }; "touchGestures": { "alias": "touchGestures"; "required": false; }; "clip": { "alias": "clip"; "required": false; }; "counter": { "alias": "counter"; "required": false; }; "counterOrientation": { "alias": "counterOrientation"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; "objectFit": { "alias": "objectFit"; "required": false; }; "isRtl": { "alias": "isRtl"; "required": false; }; "visibleItems": { "alias": "visibleItems"; "required": false; }; "moveByItems": { "alias": "moveByItems"; "required": false; }; "itemTemplate": { "alias": "itemTemplate"; "required": false; }; "errorTemplate": { "alias": "errorTemplate"; "required": false; }; "arrowTemplate": { "alias": "arrowTemplate"; "required": false; }; "contentTemplate": { "alias": "contentTemplate"; "required": false; }; "thumbs": { "alias": "thumbs"; "required": false; }; "thumbsAutoScroll": { "alias": "thumbsAutoScroll"; "required": false; }; "thumbsOrientation": { "alias": "thumbsOrientation"; "required": false; }; "thumbsArrows": { "alias": "thumbsArrows"; "required": false; }; "thumbsArrowSlideByLength": { "alias": "thumbsArrowSlideByLength"; "required": false; }; "thumbsScrollBehavior": { "alias": "thumbsScrollBehavior"; "required": false; }; "thumbTemplate": { "alias": "thumbTemplate"; "required": false; }; "thumbsArrowTemplate": { "alias": "thumbsArrowTemplate"; "required": false; }; "thumbErrorTemplate": { "alias": "thumbErrorTemplate"; "required": false; }; }, { "itemClick": "itemClick"; "thumbClick": "thumbClick"; "thumbHover": "thumbHover"; "descriptionClick": "descriptionClick"; "selection": "selection"; }, never, never, true, never>;
}
