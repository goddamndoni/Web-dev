import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, NgZone, OnChanges, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { Aria, ContentTemplateContext, GalleryItemEvent, ItemTemplateContext, Loading, ObjectFit, OrientationFlag, VerticalOrientation } from '../../core';
import { GalleryItemInternal } from '../../core/gallery-item';
import * as i0 from "@angular/core";
export declare class ViewerComponent implements OnChanges, OnInit, AfterViewInit {
    private _hostRef;
    private _cd;
    private _destroyRef;
    private _zone;
    items: GalleryItemInternal[];
    selectedIndex: number;
    arrows?: boolean;
    descriptions?: boolean;
    errorText?: string;
    showErrors?: boolean;
    mouseGestures?: boolean;
    touchGestures?: boolean;
    counter?: boolean;
    counterOrientation: VerticalOrientation;
    loading?: Loading;
    objectFit?: ObjectFit;
    itemTemplate?: TemplateRef<ItemTemplateContext>;
    errorTemplate?: TemplateRef<any>;
    arrowTemplate?: TemplateRef<any>;
    contentTemplate?: TemplateRef<ContentTemplateContext>;
    thumbsOrientation?: OrientationFlag;
    aria?: Aria;
    loop?: boolean;
    visibleItems: number;
    moveByItems: number;
    clip?: boolean;
    isRtl?: boolean;
    itemClick: EventEmitter<GalleryItemEvent>;
    descriptionClick: EventEmitter<Event>;
    selection: EventEmitter<number>;
    itemListRef: ElementRef<HTMLElement>;
    itemsRef: QueryList<ElementRef<HTMLElement>>;
    displayedItems?: GalleryItemInternal[];
    fringeCount: number;
    reallyLoop?: boolean;
    private _itemWidth;
    private fringeObserver?;
    private pointerDeltaX;
    private sliding;
    set noAnimation(value: boolean);
    get counterIndex(): number;
    get showArrow(): boolean | undefined;
    get showPrevArrow(): boolean | undefined;
    get showNextArrow(): boolean | undefined;
    constructor(_hostRef: ElementRef<HTMLElement>, _cd: ChangeDetectorRef, _destroyRef: DestroyRef, _zone: NgZone);
    ngOnChanges({ visibleItems, items, loop }: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    isYoutube(item: GalleryItemInternal): boolean;
    select(index: number, shortPath?: boolean): void;
    selectByDelta(delta: number): void;
    onImageClick(item: GalleryItemInternal, event: Event): void;
    onTab(nextItemIndex: number): void;
    onItemErrored(item: GalleryItemInternal): void;
    itemFailedToLoad(item: GalleryItemInternal): boolean | undefined;
    itemTabbable(index: number): 0 | -1;
    private center;
    private correctIndexOutOfBounds;
    private getFringeCount;
    private getItemsToBeDisplayed;
    private handleMouseSlides;
    private handleTouchSlides;
    private handleResizes;
    private loopTo;
    private observeFringes;
    private repositionOnFringe;
    private updateDimensions;
    private selectBySwipeStats;
    private shift;
    private shiftByDelta;
    private stopCurrentVideo;
    static ɵfac: i0.ɵɵFactoryDeclaration<ViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ViewerComponent, "viewer", never, { "items": { "alias": "items"; "required": false; }; "selectedIndex": { "alias": "selectedIndex"; "required": false; }; "arrows": { "alias": "arrows"; "required": false; }; "descriptions": { "alias": "descriptions"; "required": false; }; "errorText": { "alias": "errorText"; "required": false; }; "showErrors": { "alias": "showErrors"; "required": false; }; "mouseGestures": { "alias": "mouseGestures"; "required": false; }; "touchGestures": { "alias": "touchGestures"; "required": false; }; "counter": { "alias": "counter"; "required": false; }; "counterOrientation": { "alias": "counterOrientation"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "objectFit": { "alias": "objectFit"; "required": false; }; "itemTemplate": { "alias": "itemTemplate"; "required": false; }; "errorTemplate": { "alias": "errorTemplate"; "required": false; }; "arrowTemplate": { "alias": "arrowTemplate"; "required": false; }; "contentTemplate": { "alias": "contentTemplate"; "required": false; }; "thumbsOrientation": { "alias": "thumbsOrientation"; "required": false; }; "aria": { "alias": "aria"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; "visibleItems": { "alias": "visibleItems"; "required": false; }; "moveByItems": { "alias": "moveByItems"; "required": false; }; "clip": { "alias": "clip"; "required": false; }; "isRtl": { "alias": "isRtl"; "required": false; }; }, { "itemClick": "itemClick"; "descriptionClick": "descriptionClick"; "selection": "selection"; }, never, never, true, never>;
}
