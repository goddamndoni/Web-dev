import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild, } from '@angular/core';
import { defaultAria } from '../../core/aria';
import { ThumbsComponent } from '../thumbs/thumbs.component';
import { ViewerComponent } from '../viewer/viewer.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryComponent {
    constructor() {
        /**
         * Gallery items to display
         */
        this.items = [];
        /**
         * Initially selected item, 0-based
         */
        this.selectedIndex = 0;
        /**
         * Aria labels
         */
        this.aria = defaultAria;
        /**
         * Show left and right icons to navigate between images in the viewer
         */
        this.arrows = true;
        /**
         * Displayes item descriptions if any are present in `GalleryItem`
         */
        this.descriptions = false;
        /**
         * Display an error when the media contained in gallery item failed to load.
         */
        this.showErrors = false;
        /**
         * Allow mouse swipes
         */
        this.mouseGestures = true;
        /**
         * Allow touch swipes
         */
        this.touchGestures = true;
        /**
         * Controls whether items outside gallery's scrollport should overflow it. When clip == false,
         * items overflowing the gallery will be visible on both sides. Otherwise they will be hidden
         * with `overflow: hidden`.
         */
        this.clip = true;
        /**
         * Show item counter in the slider area
         */
        this.counter = true;
        this.counterOrientation = 'bottom';
        /**
         * Either makes images load eagerly or lazily. The lazy loading is managed by the browser itself.
         */
        this.loading = 'lazy';
        /**
         * Turns on infinite looping for swiping and arrows navigation.
         */
        this.loop = false;
        /**
         * The way an image or video should fill its container.
         */
        this.objectFit = 'cover';
        /**
         * Right to left mode
         */
        this.isRtl = false;
        /**
         * How many items are visible in the scrollport.
         */
        this.visibleItems = 1;
        /**
         * By how many items the slider shifts when user navigates with arrows.
         */
        this.moveByItems = this.visibleItems;
        /**
         * Show thumbnail list.
         */
        this.thumbs = true;
        /**
         * Scroll thumbnails automatically as you navigate in image viewer.
         */
        this.thumbsAutoScroll = true;
        /**
         * Where thumbnails will be placed in relation to slider.
         */
        this.thumbsOrientation = 'bottom';
        /**
         * Show arrows to navigate thumbnails.
         */
        this.thumbsArrows = true;
        /**
         * Smooth or instant navigation in thumbnails.
         */
        this.thumbsScrollBehavior = 'smooth';
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.thumbHover = new EventEmitter();
        this.descriptionClick = new EventEmitter();
        /**
         * Triggers when item or group of items gets selected, ie. they get displayed in scrollport.
         */
        this.selection = new EventEmitter();
    }
    get _galleryColumn() {
        return (this.thumbsOrientation === 'top' || this.thumbsOrientation === 'bottom');
    }
    get _thumbsOrientationFlag() {
        return this._galleryColumn
            ? 6 /* OrientationFlag.HORIZONTAL */
            : 24 /* OrientationFlag.VERTICAL */;
    }
    ngOnChanges({ items }) {
        if (items && !items.currentValue) {
            this.items = [];
        }
    }
    focus() {
        this._viewerElRef.nativeElement.focus();
    }
    next() {
        this._viewerRef.selectByDelta(1);
    }
    prev() {
        this._viewerRef.selectByDelta(-1);
    }
    select(index) {
        this._viewerRef.select(index);
        this._thumbsRef?.select(index);
        this._selectInternal(index);
    }
    slideThumbs(direction) {
        this._thumbsRef?.slide(direction);
    }
    _onThumbClick(event) {
        this._viewerRef.select(event.index);
        this.thumbClick.emit(event);
        this._selectInternal(event.index);
    }
    _selectInternal(index) {
        this.selectedIndex = index;
        this.selection.emit(this.items[index]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: GalleryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: GalleryComponent, isStandalone: true, selector: "gallery", inputs: { items: "items", selectedIndex: "selectedIndex", aria: "aria", arrows: "arrows", descriptions: "descriptions", errorText: "errorText", showErrors: "showErrors", mouseGestures: "mouseGestures", touchGestures: "touchGestures", clip: "clip", counter: "counter", counterOrientation: "counterOrientation", loading: "loading", loop: "loop", objectFit: "objectFit", isRtl: "isRtl", visibleItems: "visibleItems", moveByItems: "moveByItems", itemTemplate: "itemTemplate", errorTemplate: "errorTemplate", arrowTemplate: "arrowTemplate", contentTemplate: "contentTemplate", thumbs: "thumbs", thumbsAutoScroll: "thumbsAutoScroll", thumbsOrientation: "thumbsOrientation", thumbsArrows: "thumbsArrows", thumbsArrowSlideByLength: "thumbsArrowSlideByLength", thumbsScrollBehavior: "thumbsScrollBehavior", thumbTemplate: "thumbTemplate", thumbsArrowTemplate: "thumbsArrowTemplate", thumbErrorTemplate: "thumbErrorTemplate" }, outputs: { itemClick: "itemClick", thumbClick: "thumbClick", thumbHover: "thumbHover", descriptionClick: "descriptionClick", selection: "selection" }, host: { listeners: { "keydown.arrowright": "next()", "keydown.arrowleft": "prev()" }, properties: { "class.rtl": "this.isRtl", "class.gallery--column": "this._galleryColumn" } }, viewQueries: [{ propertyName: "_viewerRef", first: true, predicate: ViewerComponent, descendants: true }, { propertyName: "_thumbsRef", first: true, predicate: ThumbsComponent, descendants: true }, { propertyName: "_viewerElRef", first: true, predicate: ViewerComponent, descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: "<span *ngIf=\"aria?.galleryLabel\" class=\"sr-only\" tabindex=\"0\">\n  {{ aria.galleryLabel }}\n</span>\n\n<thumbs\n  *ngIf=\"thumbs\"\n  [items]=\"items\"\n  [selectedIndex]=\"selectedIndex\"\n  [orientation]=\"thumbsOrientation\"\n  [arrows]=\"thumbsArrows\"\n  [arrowSlideByLength]=\"thumbsArrowSlideByLength\"\n  [autoScroll]=\"thumbsAutoScroll\"\n  [scrollBehavior]=\"thumbsScrollBehavior\"\n  [thumbTemplate]=\"thumbTemplate\"\n  [arrowTemplate]=\"thumbsArrowTemplate\"\n  [errorTemplate]=\"thumbErrorTemplate\"\n  [aria]=\"aria\"\n  [isRtl]=\"isRtl\"\n  (thumbClick)=\"_onThumbClick($event)\"\n  (thumbHover)=\"thumbHover.emit($event)\"\n></thumbs>\n\n<viewer\n  [items]=\"items\"\n  [selectedIndex]=\"+selectedIndex\"\n  [arrows]=\"arrows\"\n  [descriptions]=\"descriptions\"\n  [errorText]=\"errorText\"\n  [showErrors]=\"showErrors\"\n  [mouseGestures]=\"mouseGestures\"\n  [touchGestures]=\"touchGestures\"\n  [clip]=\"clip\"\n  [counter]=\"counter\"\n  [counterOrientation]=\"counterOrientation\"\n  [visibleItems]=\"visibleItems\"\n  [moveByItems]=\"moveByItems\"\n  [objectFit]=\"objectFit\"\n  [loading]=\"loading\"\n  [itemTemplate]=\"itemTemplate\"\n  [errorTemplate]=\"errorTemplate\"\n  [contentTemplate]=\"contentTemplate\"\n  [loop]=\"loop\"\n  [thumbsOrientation]=\"_thumbsOrientationFlag\"\n  [arrowTemplate]=\"arrowTemplate\"\n  [aria]=\"aria\"\n  [isRtl]=\"isRtl\"\n  (itemClick)=\"itemClick.emit($event)\"\n  (descriptionClick)=\"descriptionClick.emit($event)\"\n  (selection)=\"_selectInternal($event); _thumbsRef?.select($event)\"\n>\n</viewer>\n", styles: [":host{display:flex;height:600px;width:500px;outline:0;position:relative}:host.gallery--column{flex-direction:column}:host.rtl{direction:ltr}:host.rtl viewer,:host.rtl thumbs{direction:rtl}:host::ng-deep{font-family:Helvetica Neue,Helvetica,Arial,sans-serif}:host::ng-deep button{border:none}:host::ng-deep ul{list-style-type:none;margin:0;padding:0}:host::ng-deep .sr-only{position:absolute!important;clip:rect(1px,1px,1px,1px);top:auto;left:-9999px;width:1px;height:1px;overflow:hidden}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: ThumbsComponent, selector: "thumbs", inputs: ["items", "selectedIndex", "aria", "orientation", "arrows", "arrowSlideByLength", "autoScroll", "thumbTemplate", "arrowTemplate", "errorTemplate", "scrollBehavior", "isRtl"], outputs: ["thumbClick", "thumbHover"] }, { kind: "component", type: ViewerComponent, selector: "viewer", inputs: ["items", "selectedIndex", "arrows", "descriptions", "errorText", "showErrors", "mouseGestures", "touchGestures", "counter", "counterOrientation", "loading", "objectFit", "itemTemplate", "errorTemplate", "arrowTemplate", "contentTemplate", "thumbsOrientation", "aria", "loop", "visibleItems", "moveByItems", "clip", "isRtl"], outputs: ["itemClick", "descriptionClick", "selection"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: GalleryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gallery', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule, ThumbsComponent, ViewerComponent], template: "<span *ngIf=\"aria?.galleryLabel\" class=\"sr-only\" tabindex=\"0\">\n  {{ aria.galleryLabel }}\n</span>\n\n<thumbs\n  *ngIf=\"thumbs\"\n  [items]=\"items\"\n  [selectedIndex]=\"selectedIndex\"\n  [orientation]=\"thumbsOrientation\"\n  [arrows]=\"thumbsArrows\"\n  [arrowSlideByLength]=\"thumbsArrowSlideByLength\"\n  [autoScroll]=\"thumbsAutoScroll\"\n  [scrollBehavior]=\"thumbsScrollBehavior\"\n  [thumbTemplate]=\"thumbTemplate\"\n  [arrowTemplate]=\"thumbsArrowTemplate\"\n  [errorTemplate]=\"thumbErrorTemplate\"\n  [aria]=\"aria\"\n  [isRtl]=\"isRtl\"\n  (thumbClick)=\"_onThumbClick($event)\"\n  (thumbHover)=\"thumbHover.emit($event)\"\n></thumbs>\n\n<viewer\n  [items]=\"items\"\n  [selectedIndex]=\"+selectedIndex\"\n  [arrows]=\"arrows\"\n  [descriptions]=\"descriptions\"\n  [errorText]=\"errorText\"\n  [showErrors]=\"showErrors\"\n  [mouseGestures]=\"mouseGestures\"\n  [touchGestures]=\"touchGestures\"\n  [clip]=\"clip\"\n  [counter]=\"counter\"\n  [counterOrientation]=\"counterOrientation\"\n  [visibleItems]=\"visibleItems\"\n  [moveByItems]=\"moveByItems\"\n  [objectFit]=\"objectFit\"\n  [loading]=\"loading\"\n  [itemTemplate]=\"itemTemplate\"\n  [errorTemplate]=\"errorTemplate\"\n  [contentTemplate]=\"contentTemplate\"\n  [loop]=\"loop\"\n  [thumbsOrientation]=\"_thumbsOrientationFlag\"\n  [arrowTemplate]=\"arrowTemplate\"\n  [aria]=\"aria\"\n  [isRtl]=\"isRtl\"\n  (itemClick)=\"itemClick.emit($event)\"\n  (descriptionClick)=\"descriptionClick.emit($event)\"\n  (selection)=\"_selectInternal($event); _thumbsRef?.select($event)\"\n>\n</viewer>\n", styles: [":host{display:flex;height:600px;width:500px;outline:0;position:relative}:host.gallery--column{flex-direction:column}:host.rtl{direction:ltr}:host.rtl viewer,:host.rtl thumbs{direction:rtl}:host::ng-deep{font-family:Helvetica Neue,Helvetica,Arial,sans-serif}:host::ng-deep button{border:none}:host::ng-deep ul{list-style-type:none;margin:0;padding:0}:host::ng-deep .sr-only{position:absolute!important;clip:rect(1px,1px,1px,1px);top:auto;left:-9999px;width:1px;height:1px;overflow:hidden}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], aria: [{
                type: Input
            }], arrows: [{
                type: Input
            }], descriptions: [{
                type: Input
            }], errorText: [{
                type: Input
            }], showErrors: [{
                type: Input
            }], mouseGestures: [{
                type: Input
            }], touchGestures: [{
                type: Input
            }], clip: [{
                type: Input
            }], counter: [{
                type: Input
            }], counterOrientation: [{
                type: Input
            }], loading: [{
                type: Input
            }], loop: [{
                type: Input
            }], objectFit: [{
                type: Input
            }], isRtl: [{
                type: HostBinding,
                args: ['class.rtl']
            }, {
                type: Input
            }], visibleItems: [{
                type: Input
            }], moveByItems: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }], errorTemplate: [{
                type: Input
            }], arrowTemplate: [{
                type: Input
            }], contentTemplate: [{
                type: Input
            }], thumbs: [{
                type: Input
            }], thumbsAutoScroll: [{
                type: Input
            }], thumbsOrientation: [{
                type: Input
            }], thumbsArrows: [{
                type: Input
            }], thumbsArrowSlideByLength: [{
                type: Input
            }], thumbsScrollBehavior: [{
                type: Input
            }], thumbTemplate: [{
                type: Input
            }], thumbsArrowTemplate: [{
                type: Input
            }], thumbErrorTemplate: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], thumbClick: [{
                type: Output
            }], thumbHover: [{
                type: Output
            }], descriptionClick: [{
                type: Output
            }], selection: [{
                type: Output
            }], _viewerRef: [{
                type: ViewChild,
                args: [ViewerComponent]
            }], _thumbsRef: [{
                type: ViewChild,
                args: [ThumbsComponent]
            }], _viewerElRef: [{
                type: ViewChild,
                args: [ViewerComponent, { read: ElementRef }]
            }], _galleryColumn: [{
                type: HostBinding,
                args: ['class.gallery--column']
            }], next: [{
                type: HostListener,
                args: ['keydown.arrowright']
            }], prev: [{
                type: HostListener,
                args: ['keydown.arrowleft']
            }] } });
//# sourceMappingURL=data:application/json;base64,