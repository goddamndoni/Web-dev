import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewChild, ViewChildren, } from '@angular/core';
import { SUPPORT, isBrowser, } from '../../core';
import { ChevronIconComponent } from '../icons/chevron/chevron-icon.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ThumbsComponent {
    get cssClass() {
        return `thumbs--${this.orientation}`;
    }
    get hostOffsetAxis() {
        return this.vertical
            ? this.elRef.nativeElement.offsetHeight
            : this.elRef.nativeElement.offsetWidth;
    }
    get scrollKey() {
        return this.vertical ? 'scrollTop' : 'scrollLeft';
    }
    get thumbsEmpty() {
        return !this.thumbsRef || !this.thumbsRef.length;
    }
    get vertical() {
        return this.orientation === 'left' || this.orientation === 'right';
    }
    constructor(cd, elRef) {
        this.cd = cd;
        this.elRef = elRef;
        this.items = [];
        this.thumbClick = new EventEmitter();
        this.thumbHover = new EventEmitter();
        this.showStartArrow = false;
        this.showEndArrow = false;
        this.onArrowsObserved = entries => {
            if (this.thumbsEmpty)
                return;
            const firstTarget = entries[0].target;
            const { first, last } = this.thumbsRef;
            const firstThumbEntry = firstTarget === first.nativeElement ? entries[0] : entries[1];
            const lastThumbEntry = firstTarget === last.nativeElement ? entries[0] : entries[1];
            this.setObservedArrows(firstThumbEntry, lastThumbEntry);
            this.cd.detectChanges();
        };
    }
    ngOnChanges({ arrows, items }) {
        if (arrows) {
            if (arrows.currentValue) {
                this.observeArrows();
            }
            else if (!arrows.currentValue) {
                this.showStartArrow = this.showEndArrow = false;
                this.unobserveArrows();
            }
        }
        if (items) {
            setTimeout(() => {
                if (this.arrows) {
                    this.observeArrows();
                }
                this.centerThumbIfNeeded(this.selectedIndex);
            });
        }
    }
    ngOnDestroy() {
        this.unobserveArrows();
    }
    slide(direction) {
        let delta;
        if (this.arrowSlideByLength) {
            delta = this.arrowSlideByLength;
        }
        else {
            // Note: Slide by the full height/width of the gallery
            // or by the overflow of the thumbs - to prevent unnecessary requestAnimationFrame calls while trying to scroll
            // outside of the min/max scroll of the thumbs
            const thumbList = this.thumbListRef.nativeElement;
            const thumbListScrollAxis = this.vertical
                ? thumbList.scrollHeight
                : thumbList.scrollWidth;
            const thumbListOffsetAxis = this.vertical
                ? thumbList.offsetHeight
                : thumbList.offsetWidth;
            delta = Math.min(thumbListOffsetAxis, thumbListScrollAxis - thumbListOffsetAxis);
        }
        this.scroll(delta * direction);
    }
    centerThumbIfNeeded(index) {
        if (!this.items || this.items.length <= 1) {
            return;
        }
        const nextItemRef = this.thumbsRef.toArray()[index];
        if (!nextItemRef) {
            return;
        }
        const nextItemEl = nextItemRef.nativeElement;
        const { offsetLeft, offsetTop, offsetWidth, offsetHeight } = nextItemEl;
        const itemOffset = this.vertical ? offsetTop : offsetLeft;
        const itemOffsetAxis = this.vertical ? offsetHeight : offsetWidth;
        const hostScrollAxis = this.hostOffsetAxis;
        const thumbListScroll = this.thumbListRef.nativeElement[this.scrollKey];
        const nextScrollDelta = itemOffset + itemOffsetAxis / 2 - hostScrollAxis / 2 - thumbListScroll;
        if (thumbListScroll + hostScrollAxis < itemOffset + itemOffsetAxis ||
            thumbListScroll > itemOffset) {
            this.scroll(nextScrollDelta);
        }
    }
    select(index) {
        this.selectedIndex = index;
        this.cd.detectChanges();
        if (this.autoScroll) {
            setTimeout(() => this.centerThumbIfNeeded(index));
        }
    }
    emitEvent(index, item, event, emitter) {
        emitter.emit({
            index,
            item,
            event,
        });
    }
    onLoadChange(item, success) {
        item._thumbFailed = !success;
    }
    scroll(totalScrollDelta) {
        if (!isBrowser) {
            return;
        }
        if (SUPPORT.scrollBehavior || this.scrollBehavior === 'auto') {
            this.shiftByDelta(totalScrollDelta);
            return;
        }
        if (this.scrollId != null) {
            cancelAnimationFrame(this.scrollId);
        }
        const totalDistance = Math.abs(totalScrollDelta);
        const startTime = Date.now();
        const baseArrowSlideTime = 200;
        let totalTime = (Math.log10(totalDistance) - 1.1) * baseArrowSlideTime;
        if (totalTime < 0) {
            totalTime = baseArrowSlideTime;
        }
        let currentScroll = 0;
        // Emulating native scroll-behavior: smooth
        // NOTE: This function is called on per frame basis recursively to create smooth animation.
        // The scroll value is updated proportionally to the time elapsed since the animation's start.
        // The period of requested frames should match the display's refresh rate as recommended in W3C spec.
        const animate = () => {
            const suggestedScroll = Math.ceil(((Date.now() - startTime) / totalTime) * totalDistance);
            let frameScroll = Math.min(suggestedScroll - currentScroll, totalDistance - currentScroll);
            frameScroll *= Math.sign(totalScrollDelta);
            currentScroll = suggestedScroll;
            this.shiftByDelta(frameScroll);
            if (currentScroll <= totalDistance) {
                this.scrollId = requestAnimationFrame(animate);
            }
        };
        this.scrollId = requestAnimationFrame(animate);
    }
    shiftByDelta(delta) {
        this.thumbListRef.nativeElement[this.scrollKey] += delta;
    }
    observeArrows() {
        if (this.thumbsEmpty)
            return;
        if (!this.arrowObserver) {
            this.arrowObserver = new IntersectionObserver(this.onArrowsObserved, {
                root: this.thumbListRef.nativeElement,
                threshold: 1.0,
            });
        }
        else {
            this.unobserveArrows();
        }
        this.arrowObserver.observe(this.thumbsRef.first.nativeElement);
        this.arrowObserver.observe(this.thumbsRef.last.nativeElement);
    }
    setObservedArrows(firstThumb, lastThumb) {
        const inverse = this.isRtl && !this.vertical;
        if (inverse) {
            if (lastThumb)
                this.showStartArrow = lastThumb.intersectionRatio < 1;
            if (firstThumb)
                this.showEndArrow = firstThumb.intersectionRatio < 1;
        }
        else {
            if (firstThumb)
                this.showStartArrow = firstThumb.intersectionRatio < 1;
            if (lastThumb)
                this.showEndArrow = lastThumb.intersectionRatio < 1;
        }
    }
    unobserveArrows() {
        this.arrowObserver && this.arrowObserver.disconnect();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: ThumbsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: ThumbsComponent, isStandalone: true, selector: "thumbs", inputs: { items: "items", selectedIndex: "selectedIndex", aria: "aria", orientation: "orientation", arrows: "arrows", arrowSlideByLength: "arrowSlideByLength", autoScroll: "autoScroll", thumbTemplate: "thumbTemplate", arrowTemplate: "arrowTemplate", errorTemplate: "errorTemplate", scrollBehavior: "scrollBehavior", isRtl: "isRtl" }, outputs: { thumbClick: "thumbClick", thumbHover: "thumbHover" }, host: { properties: { "class": "this.cssClass" } }, viewQueries: [{ propertyName: "thumbListRef", first: true, predicate: ["thumbs"], descendants: true, static: true }, { propertyName: "thumbsRef", predicate: ["thumb"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<button\n  *ngIf=\"showStartArrow\"\n  aria-label=\"Previous thumbnails\"\n  class=\"thumbs-arrow thumbs-arrow-prev\"\n  (click)=\"slide(-1)\"\n>\n  <div *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\">\n    <chevron-icon></chevron-icon>\n  </div>\n</button>\n\n<ul #thumbs [style.scrollBehavior]=\"scrollBehavior\" [class.rtl]=\"isRtl\">\n  <li *ngIf=\"!items || !items.length\" class=\"thumbs-initial-item\"></li>\n  <li\n    #thumb\n    *ngFor=\"let item of items; let i = index\"\n    [class.thumbs-item--selected]=\"i === selectedIndex\"\n    aria-hidden=\"true\"\n    (click)=\"emitEvent(i, item, $event, thumbClick)\"\n    (mouseenter)=\"emitEvent(i, item, $event, thumbHover)\"\n  >\n    <ng-container *ngIf=\"!thumbTemplate; else customThumbTemplate\">\n      <img\n        [src]=\"item.thumbSrc || ''\"\n        [alt]=\"item.alt\"\n        (load)=\"onLoadChange(item, true)\"\n        (error)=\"onLoadChange(item, false)\"\n      />\n\n      <ng-container *ngIf=\"item._thumbFailed\">\n        <div\n          *ngIf=\"!errorTemplate; else $any(errorTemplate)\"\n          class=\"thumbs-error\"\n        >\n          <div\n            class=\"thumbs-error-icon\"\n            [class.thumbs-error-icon--video]=\"item.video\"\n          ></div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #customThumbTemplate>\n      <ng-container\n        *ngTemplateOutlet=\"\n          $any(thumbTemplate);\n          context: { index: i, selectedIndex: selectedIndex, item: item }\n        \"\n      ></ng-container>\n    </ng-template>\n  </li>\n</ul>\n\n<button\n  *ngIf=\"showEndArrow\"\n  aria-label=\"Next thumbnails\"\n  class=\"thumbs-arrow thumbs-arrow-next\"\n  (click)=\"slide(1)\"\n>\n  <div *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\">\n    <chevron-icon></chevron-icon>\n  </div>\n</button>\n", styles: [":host{flex:1 0 auto;position:relative;background-color:#f3f3f3}:host.thumbs--top,:host.thumbs--bottom{width:100%}:host.thumbs--top ul,:host.thumbs--bottom ul{width:100%;display:flex;overflow-x:scroll;overflow-y:hidden}:host.thumbs--top ul.rtl li:first-child,:host.thumbs--bottom ul.rtl li:first-child{margin-left:0;margin-right:auto}:host.thumbs--top ul.rtl li:last-child,:host.thumbs--bottom ul.rtl li:last-child{margin-right:0;margin-left:auto}:host.thumbs--top li,:host.thumbs--bottom li{flex:none}:host.thumbs--top li:not(:first-child),:host.thumbs--bottom li:not(:first-child){border-left:0}:host.thumbs--top li:first-child,:host.thumbs--bottom li:first-child{margin-left:auto}:host.thumbs--top li:last-child,:host.thumbs--bottom li:last-child{margin-right:auto}:host.thumbs--top .thumbs-arrow,:host.thumbs--bottom .thumbs-arrow{top:0;height:100%}:host.thumbs--top .thumbs-arrow>div,:host.thumbs--bottom .thumbs-arrow>div{width:30px;height:100%}:host.thumbs--top .thumbs-arrow-prev,:host.thumbs--bottom .thumbs-arrow-prev{left:0}:host.thumbs--top .thumbs-arrow-next,:host.thumbs--bottom .thumbs-arrow-next{right:0}:host.thumbs--top .thumbs-error,:host.thumbs--bottom .thumbs-error{border-right:1px solid #cecece}:host.thumbs--left,:host.thumbs--right{height:100%}:host.thumbs--left ul,:host.thumbs--right ul{height:100%;overflow-y:scroll;overflow-x:hidden}:host.thumbs--left li,:host.thumbs--right li{border-top:0}:host.thumbs--left .thumbs-arrow,:host.thumbs--right .thumbs-arrow{width:100%}:host.thumbs--left .thumbs-arrow>div,:host.thumbs--right .thumbs-arrow>div{width:100%;height:30px}:host.thumbs--left .thumbs-arrow chevron-icon,:host.thumbs--right .thumbs-arrow chevron-icon{transform:rotate(90deg)}:host.thumbs--left .thumbs-arrow-prev,:host.thumbs--right .thumbs-arrow-prev{top:0}:host.thumbs--left .thumbs-arrow-next,:host.thumbs--right .thumbs-arrow-next{bottom:0}:host.thumbs--left .thumbs-error,:host.thumbs--right .thumbs-error{border-bottom:1px solid #cecece}:host.thumbs--bottom,:host.thumbs--right{order:1}ul{outline:0;scrollbar-width:none;-webkit-overflow-scrolling:touch;transform:translateZ(0)}ul::-webkit-scrollbar{width:0;height:0}li{box-sizing:border-box;width:120px;height:80px;position:relative;cursor:pointer}li.thumbs-initial-item{visibility:hidden}li.thumbs-item--selected:after{content:\"\";display:block;position:absolute;left:0;bottom:0;width:100%;height:100%;border:10px solid rgba(255,255,255,.8117647059);box-sizing:border-box}img{width:100%;height:100%;background-repeat:no-repeat;background-position:center;object-fit:cover;color:transparent}.thumbs-error{position:absolute;left:0;top:0;width:100%;height:100%;display:flex;flex-flow:column nowrap;justify-content:center;align-items:center;background:#e8e8e8;box-sizing:border-box}.thumbs-error-icon:not(.thumbs-error-icon--video){position:relative;border-left:16px solid transparent;border-right:16px solid transparent;border-bottom:28px solid #a5a5a5;margin-left:-8px}.thumbs-error-icon:not(.thumbs-error-icon--video):before,.thumbs-error-icon:not(.thumbs-error-icon--video):after{content:\"\";position:absolute}.thumbs-error-icon:not(.thumbs-error-icon--video):before{height:10px;width:10px;background-color:#a5a5a5;border-radius:100%;left:14px}.thumbs-error-icon:not(.thumbs-error-icon--video):after{border-left:14px solid transparent;border-right:14px solid transparent;border-bottom:17px solid #a5a5a5;top:11px}.thumbs-error-icon--video{border-top:16px solid transparent;border-bottom:16px solid transparent;border-left:28px solid #a5a5a5;margin-left:9px}.thumbs-arrow{position:absolute;padding:0;background-color:transparent;cursor:pointer;z-index:10}.thumbs-arrow-prev{transform:scale(-1)}.thumbs-arrow>div{display:flex;justify-content:center;align-items:center;background:rgba(0,0,0,.5);padding:0;opacity:.7}@media (hover: hover) and (pointer: fine){.thumbs-arrow>div:hover{opacity:1}}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: ChevronIconComponent, selector: "chevron-icon" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: ThumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'thumbs', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule, ChevronIconComponent], template: "<button\n  *ngIf=\"showStartArrow\"\n  aria-label=\"Previous thumbnails\"\n  class=\"thumbs-arrow thumbs-arrow-prev\"\n  (click)=\"slide(-1)\"\n>\n  <div *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\">\n    <chevron-icon></chevron-icon>\n  </div>\n</button>\n\n<ul #thumbs [style.scrollBehavior]=\"scrollBehavior\" [class.rtl]=\"isRtl\">\n  <li *ngIf=\"!items || !items.length\" class=\"thumbs-initial-item\"></li>\n  <li\n    #thumb\n    *ngFor=\"let item of items; let i = index\"\n    [class.thumbs-item--selected]=\"i === selectedIndex\"\n    aria-hidden=\"true\"\n    (click)=\"emitEvent(i, item, $event, thumbClick)\"\n    (mouseenter)=\"emitEvent(i, item, $event, thumbHover)\"\n  >\n    <ng-container *ngIf=\"!thumbTemplate; else customThumbTemplate\">\n      <img\n        [src]=\"item.thumbSrc || ''\"\n        [alt]=\"item.alt\"\n        (load)=\"onLoadChange(item, true)\"\n        (error)=\"onLoadChange(item, false)\"\n      />\n\n      <ng-container *ngIf=\"item._thumbFailed\">\n        <div\n          *ngIf=\"!errorTemplate; else $any(errorTemplate)\"\n          class=\"thumbs-error\"\n        >\n          <div\n            class=\"thumbs-error-icon\"\n            [class.thumbs-error-icon--video]=\"item.video\"\n          ></div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #customThumbTemplate>\n      <ng-container\n        *ngTemplateOutlet=\"\n          $any(thumbTemplate);\n          context: { index: i, selectedIndex: selectedIndex, item: item }\n        \"\n      ></ng-container>\n    </ng-template>\n  </li>\n</ul>\n\n<button\n  *ngIf=\"showEndArrow\"\n  aria-label=\"Next thumbnails\"\n  class=\"thumbs-arrow thumbs-arrow-next\"\n  (click)=\"slide(1)\"\n>\n  <div *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\">\n    <chevron-icon></chevron-icon>\n  </div>\n</button>\n", styles: [":host{flex:1 0 auto;position:relative;background-color:#f3f3f3}:host.thumbs--top,:host.thumbs--bottom{width:100%}:host.thumbs--top ul,:host.thumbs--bottom ul{width:100%;display:flex;overflow-x:scroll;overflow-y:hidden}:host.thumbs--top ul.rtl li:first-child,:host.thumbs--bottom ul.rtl li:first-child{margin-left:0;margin-right:auto}:host.thumbs--top ul.rtl li:last-child,:host.thumbs--bottom ul.rtl li:last-child{margin-right:0;margin-left:auto}:host.thumbs--top li,:host.thumbs--bottom li{flex:none}:host.thumbs--top li:not(:first-child),:host.thumbs--bottom li:not(:first-child){border-left:0}:host.thumbs--top li:first-child,:host.thumbs--bottom li:first-child{margin-left:auto}:host.thumbs--top li:last-child,:host.thumbs--bottom li:last-child{margin-right:auto}:host.thumbs--top .thumbs-arrow,:host.thumbs--bottom .thumbs-arrow{top:0;height:100%}:host.thumbs--top .thumbs-arrow>div,:host.thumbs--bottom .thumbs-arrow>div{width:30px;height:100%}:host.thumbs--top .thumbs-arrow-prev,:host.thumbs--bottom .thumbs-arrow-prev{left:0}:host.thumbs--top .thumbs-arrow-next,:host.thumbs--bottom .thumbs-arrow-next{right:0}:host.thumbs--top .thumbs-error,:host.thumbs--bottom .thumbs-error{border-right:1px solid #cecece}:host.thumbs--left,:host.thumbs--right{height:100%}:host.thumbs--left ul,:host.thumbs--right ul{height:100%;overflow-y:scroll;overflow-x:hidden}:host.thumbs--left li,:host.thumbs--right li{border-top:0}:host.thumbs--left .thumbs-arrow,:host.thumbs--right .thumbs-arrow{width:100%}:host.thumbs--left .thumbs-arrow>div,:host.thumbs--right .thumbs-arrow>div{width:100%;height:30px}:host.thumbs--left .thumbs-arrow chevron-icon,:host.thumbs--right .thumbs-arrow chevron-icon{transform:rotate(90deg)}:host.thumbs--left .thumbs-arrow-prev,:host.thumbs--right .thumbs-arrow-prev{top:0}:host.thumbs--left .thumbs-arrow-next,:host.thumbs--right .thumbs-arrow-next{bottom:0}:host.thumbs--left .thumbs-error,:host.thumbs--right .thumbs-error{border-bottom:1px solid #cecece}:host.thumbs--bottom,:host.thumbs--right{order:1}ul{outline:0;scrollbar-width:none;-webkit-overflow-scrolling:touch;transform:translateZ(0)}ul::-webkit-scrollbar{width:0;height:0}li{box-sizing:border-box;width:120px;height:80px;position:relative;cursor:pointer}li.thumbs-initial-item{visibility:hidden}li.thumbs-item--selected:after{content:\"\";display:block;position:absolute;left:0;bottom:0;width:100%;height:100%;border:10px solid rgba(255,255,255,.8117647059);box-sizing:border-box}img{width:100%;height:100%;background-repeat:no-repeat;background-position:center;object-fit:cover;color:transparent}.thumbs-error{position:absolute;left:0;top:0;width:100%;height:100%;display:flex;flex-flow:column nowrap;justify-content:center;align-items:center;background:#e8e8e8;box-sizing:border-box}.thumbs-error-icon:not(.thumbs-error-icon--video){position:relative;border-left:16px solid transparent;border-right:16px solid transparent;border-bottom:28px solid #a5a5a5;margin-left:-8px}.thumbs-error-icon:not(.thumbs-error-icon--video):before,.thumbs-error-icon:not(.thumbs-error-icon--video):after{content:\"\";position:absolute}.thumbs-error-icon:not(.thumbs-error-icon--video):before{height:10px;width:10px;background-color:#a5a5a5;border-radius:100%;left:14px}.thumbs-error-icon:not(.thumbs-error-icon--video):after{border-left:14px solid transparent;border-right:14px solid transparent;border-bottom:17px solid #a5a5a5;top:11px}.thumbs-error-icon--video{border-top:16px solid transparent;border-bottom:16px solid transparent;border-left:28px solid #a5a5a5;margin-left:9px}.thumbs-arrow{position:absolute;padding:0;background-color:transparent;cursor:pointer;z-index:10}.thumbs-arrow-prev{transform:scale(-1)}.thumbs-arrow>div{display:flex;justify-content:center;align-items:center;background:rgba(0,0,0,.5);padding:0;opacity:.7}@media (hover: hover) and (pointer: fine){.thumbs-arrow>div:hover{opacity:1}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { items: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], aria: [{
                type: Input
            }], orientation: [{
                type: Input
            }], arrows: [{
                type: Input
            }], arrowSlideByLength: [{
                type: Input
            }], autoScroll: [{
                type: Input
            }], thumbTemplate: [{
                type: Input
            }], arrowTemplate: [{
                type: Input
            }], errorTemplate: [{
                type: Input
            }], scrollBehavior: [{
                type: Input
            }], isRtl: [{
                type: Input
            }], thumbClick: [{
                type: Output
            }], thumbHover: [{
                type: Output
            }], thumbListRef: [{
                type: ViewChild,
                args: ['thumbs', { static: true }]
            }], thumbsRef: [{
                type: ViewChildren,
                args: ['thumb']
            }], cssClass: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,