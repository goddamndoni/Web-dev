import { animate, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewChild, ViewChildren, } from '@angular/core';
import { UA, isBrowser, } from '../../core';
import { MediaDirective } from '../../directives/media.directive';
import { SafePipe } from '../../pipes/safe.pipe';
import { CounterComponent } from '../counter/counter.component';
import { ChevronIconComponent } from '../icons/chevron/chevron-icon.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const passiveEventListenerOpts = {
    passive: true,
};
export class ViewerComponent {
    set noAnimation(value) {
        this.itemListRef.nativeElement.style.transitionDuration = value
            ? '0ms'
            : '400ms';
    }
    get counterIndex() {
        return Math.floor(this.selectedIndex / this.moveByItems);
    }
    get showArrow() {
        return this.arrows && this.items && this.items.length > 1;
    }
    get showPrevArrow() {
        return this.showArrow && (this.selectedIndex > 0 || this.reallyLoop);
    }
    get showNextArrow() {
        return (this.showArrow &&
            (this.selectedIndex < this.items.length - 1 || this.reallyLoop));
    }
    constructor(_hostRef, _cd, _destroyRef, _zone) {
        this._hostRef = _hostRef;
        this._cd = _cd;
        this._destroyRef = _destroyRef;
        this._zone = _zone;
        this.itemClick = new EventEmitter();
        this.descriptionClick = new EventEmitter();
        this.selection = new EventEmitter();
        this.fringeCount = this.getFringeCount();
        this._itemWidth = 0;
        this.pointerDeltaX = 0;
        this.sliding = false;
        this.repositionOnFringe = entries => {
            if (!this.reallyLoop || !this.sliding) {
                return;
            }
            const { first } = this.itemsRef;
            const visibleEntries = entries.filter(e => e.isIntersecting);
            if (visibleEntries.length === 0) {
                return;
            }
            const beginningVisible = entries[0].target === first.nativeElement;
            this.pointerDeltaX +=
                (beginningVisible ? -1 : 1) * this.items.length * this._itemWidth;
        };
        this.updateDimensions = () => {
            this._itemWidth =
                this._hostRef.nativeElement.querySelector('li').offsetWidth;
        };
        this.shiftByDelta = (delta) => {
            this.pointerDeltaX += delta;
            this.shift(this.pointerDeltaX);
        };
    }
    ngOnChanges({ visibleItems, items, loop }) {
        if (visibleItems) {
            this.itemListRef.nativeElement.style.setProperty('--item-width', `calc(100% / ${this.visibleItems})`);
            setTimeout(this.updateDimensions);
        }
        if (loop || items) {
            this.reallyLoop = this.items.length > 1 ? this.loop : false;
            if (this.reallyLoop) {
                setTimeout(() => this.observeFringes());
            }
        }
        if (items || visibleItems || loop) {
            this.fringeCount = this.getFringeCount();
            this.displayedItems = this.getItemsToBeDisplayed(this.fringeCount);
        }
    }
    ngOnInit() {
        if (isBrowser) {
            this.handleResizes();
            if (this.mouseGestures) {
                this.handleMouseSlides();
            }
            if (this.touchGestures) {
                this.handleTouchSlides();
            }
            this._destroyRef.onDestroy(() => this.fringeObserver?.disconnect());
        }
    }
    ngAfterViewInit() {
        this.center();
        setTimeout(() => (this.noAnimation = false));
    }
    isYoutube(item) {
        return !!item.src.match(/youtube.*\/embed\//);
    }
    select(index, shortPath = true) {
        if (this.selectedIndex === index) {
            return this.center();
        }
        if (this.items[this.selectedIndex]?.video) {
            this.stopCurrentVideo();
        }
        // The purpose of the short path here is best understood by the following example: If going from index
        // 6 (last) to index 0, do not go back over all the middle items, but go 6 -> 0 the short route. This
        // makes navigating slider smoother. This of course applies in the other direction as well.
        if (this.visibleItems > 1 && shortPath) {
            const maxIndex = this.items.length - this.visibleItems;
            // When going back, in direction over the first item, stop at the slider's beginning at first.
            if (this.selectedIndex !== 0 && index < 0) {
                index = 0;
            }
            else if (this.selectedIndex < maxIndex) {
                // Set the desired index or choose the last if it is the slider's last "page".
                index = Math.min(maxIndex, index);
            }
            else if (index > maxIndex) {
                // Loop to the first item if going over the slider's end. This trick makes the loop cross the
                // boundary between the last and the first.
                index = this.items.length;
            }
        }
        const indexOutOfBounds = !this.items[index];
        const looping = this.reallyLoop && indexOutOfBounds;
        if (looping) {
            this.loopTo(index);
            return this.selection.emit(this.selectedIndex);
        }
        this.selectedIndex = indexOutOfBounds
            ? this.correctIndexOutOfBounds(index)
            : index;
        this.center(); // we center only for this branch since looping does a delayed centering
        this.selection.emit(this.selectedIndex);
    }
    selectByDelta(delta) {
        this.select(this.selectedIndex + delta);
    }
    onImageClick(item, event) {
        this.itemClick.emit({
            event,
            item,
            index: this.items.indexOf(item),
        });
    }
    onTab(nextItemIndex) {
        nextItemIndex = nextItemIndex - this.fringeCount;
        // allow focus to escape viewer
        if (nextItemIndex >= 0 && nextItemIndex < this.items.length) {
            this.select(nextItemIndex);
            // focusing an item literally scrolls the item list, so I have to scroll it back
            requestAnimationFrame(() => (this._hostRef.nativeElement.scrollLeft = 0));
        }
    }
    onItemErrored(item) {
        if (!this.showErrors) {
            return;
        }
        item._failed = true;
        this._cd.detectChanges();
    }
    itemFailedToLoad(item) {
        return item._failed;
    }
    itemTabbable(index) {
        index = index - this.fringeCount;
        return index >= 0 && index < this.items.length ? 0 : -1;
    }
    center() {
        this.shift();
    }
    correctIndexOutOfBounds(index) {
        return index < 0 ? 0 : this.items.length - 1;
    }
    getFringeCount() {
        return this.reallyLoop
            ? Math.min(Math.ceil(this.visibleItems), this.items.length)
            : 0;
    }
    getItemsToBeDisplayed(fringeCount) {
        return this.reallyLoop
            ? [
                ...this.items.slice(-fringeCount),
                ...this.items,
                ...this.items.slice(0, fringeCount),
            ]
            : this.items;
    }
    handleMouseSlides() {
        this._zone.runOutsideAngular(() => {
            const hostEl = this._hostRef.nativeElement;
            let mousedown;
            let maxDeltaX = 0;
            let maxDeltaY = 0;
            const onmousedown = (e) => {
                mousedown = e;
                this.noAnimation = this.sliding = true;
                document.addEventListener('mousemove', onmousemove, passiveEventListenerOpts);
                document.addEventListener('mouseup', onmouseup, passiveEventListenerOpts);
            };
            const onmousemove = (e) => {
                maxDeltaX = Math.max(Math.abs(mousedown.x - e.x));
                maxDeltaY = Math.max(Math.abs(mousedown.y - e.y));
                this.shiftByDelta(e.movementX);
            };
            const onmouseup = () => {
                this.noAnimation = this.sliding = false;
                this._zone.run(() => this.selectBySwipeStats(this.pointerDeltaX));
                this.pointerDeltaX = 0;
                document.removeEventListener('mousemove', onmousemove);
                document.removeEventListener('mouseup', onmouseup);
            };
            const onclick = (e) => {
                if (maxDeltaX > 10 || maxDeltaY > 10) {
                    e.stopPropagation();
                    // to prevent playing a video on swipe
                    e.preventDefault();
                }
                maxDeltaY = maxDeltaX = 0;
            };
            const ondragstart = (e) => e.preventDefault();
            hostEl.addEventListener('mousedown', onmousedown, passiveEventListenerOpts);
            hostEl.addEventListener('click', onclick, { capture: true });
            hostEl.addEventListener('dragstart', ondragstart);
            this._destroyRef.onDestroy(() => {
                hostEl.removeEventListener('mousedown', onmousedown);
                hostEl.removeEventListener('click', onclick);
                hostEl.removeEventListener('dragstart', ondragstart);
            });
        });
    }
    handleTouchSlides() {
        this._zone.runOutsideAngular(() => {
            const hostEl = this._hostRef.nativeElement;
            let horizontal;
            let touchstart;
            let lastTouchmove;
            const ontouchstart = (e) => {
                touchstart = e;
                this.noAnimation = this.sliding = true;
            };
            const ontouchmove = (e) => {
                if (!touchstart || e.touches.length !== 1) {
                    return;
                }
                const startTouch = touchstart.touches[0];
                const moveTouch = e.touches[0];
                if (horizontal == null) {
                    const deltaX = Math.abs(moveTouch.clientX - startTouch.clientX);
                    const deltaY = Math.abs(moveTouch.clientY - startTouch.clientY);
                    if (deltaX || deltaY) {
                        horizontal = deltaX * 1.2 >= deltaY;
                    }
                }
                if (horizontal) {
                    this.shiftByDelta(moveTouch.clientX - (lastTouchmove ?? touchstart).touches[0].clientX);
                    lastTouchmove = e;
                    if (UA.ios) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                }
            };
            const ontouchend = () => {
                this.noAnimation = this.sliding = false;
                this._zone.run(() => this.selectBySwipeStats(this.pointerDeltaX));
                this.pointerDeltaX = 0;
                horizontal = undefined;
                touchstart = undefined;
                lastTouchmove = undefined;
            };
            hostEl.addEventListener('touchstart', ontouchstart, passiveEventListenerOpts);
            document.addEventListener('touchmove', ontouchmove, {
                passive: !UA.ios,
            });
            document.addEventListener('touchend', ontouchend, passiveEventListenerOpts);
            this._destroyRef.onDestroy(() => {
                hostEl.removeEventListener('touchstart', ontouchstart);
                document.removeEventListener('touchmove', ontouchmove);
                document.removeEventListener('touchend', ontouchend);
            });
        });
    }
    handleResizes() {
        window.addEventListener('resize', this.updateDimensions, passiveEventListenerOpts);
        this._destroyRef.onDestroy(() => {
            window.removeEventListener('resize', this.updateDimensions);
        });
    }
    loopTo(desiredIndex) {
        this.noAnimation = true;
        const shift = Math.sign(desiredIndex) * this.items.length * this._itemWidth;
        this.shiftByDelta(shift);
        this.selectedIndex =
            desiredIndex < 0
                ? desiredIndex + this.items.length
                : desiredIndex - this.items.length;
        // NOTE: This is needed so that animation is reactivated really only after the loop shift
        // happened. Without the requestAnimationFrame, the setTimeout is often not enough, as it
        // can happen still before the next frame is painted, which would cause the loop shift
        // to be animated.
        // But, requestAnimationFrame is not enough as its callback is called BEFORE the next paint,
        // not after. Second requestAnimationFrame would also be possible, but setTimeout is better
        // as it's called right after the next paint happens.
        requestAnimationFrame(() => setTimeout(() => {
            this.pointerDeltaX = 0;
            this.noAnimation = false;
            this.center();
        }));
    }
    observeFringes() {
        if (!isBrowser) {
            return;
        }
        this.fringeObserver?.disconnect();
        const observer = new IntersectionObserver(this.repositionOnFringe, {
            root: this._hostRef.nativeElement,
            threshold: 1.0,
        });
        observer.observe(this.itemsRef.first.nativeElement);
        observer.observe(this.itemsRef.last.nativeElement);
        this.fringeObserver = observer;
    }
    selectBySwipeStats(distance) {
        // I use round instead of previous ceil here because the ceil was pretty one-sided in where the
        // index delta would move. This was apparent in looping mode, where items that were clearly to be
        // scrolled to were actually hidden in favor of items that were barely visible, but selected thanks
        // to Math.ceil.
        // Now I use magical constant 2.25 to make sure a tiny swipe slides to next items, but there is still
        // a tiny threshold to make sure the slide doesn't always happen.
        const indexDelta = Math.round((Math.abs(distance) + this._itemWidth / 2.25) / this._itemWidth) * -Math.sign(distance);
        const newIndex = this.selectedIndex + indexDelta;
        this.select(newIndex, false);
    }
    shift(delta = 0) {
        const multiplier = this.isRtl ? 1 : -1;
        const index = (this.selectedIndex + this.fringeCount) * multiplier;
        delta *= -multiplier;
        const shift = `calc(${index} * var(--item-width) + ${delta}px)`;
        this.itemListRef.nativeElement.style.transform = `translate3d(${shift}, 0, 0)`;
    }
    stopCurrentVideo() {
        const videoEl = this.itemsRef
            .get(this.selectedIndex)
            ?.nativeElement.querySelector('video');
        if (videoEl) {
            videoEl.pause();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: ViewerComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.DestroyRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: ViewerComponent, isStandalone: true, selector: "viewer", inputs: { items: "items", selectedIndex: "selectedIndex", arrows: "arrows", descriptions: "descriptions", errorText: "errorText", showErrors: "showErrors", mouseGestures: "mouseGestures", touchGestures: "touchGestures", counter: "counter", counterOrientation: "counterOrientation", loading: "loading", objectFit: "objectFit", itemTemplate: "itemTemplate", errorTemplate: "errorTemplate", arrowTemplate: "arrowTemplate", contentTemplate: "contentTemplate", thumbsOrientation: "thumbsOrientation", aria: "aria", loop: "loop", visibleItems: "visibleItems", moveByItems: "moveByItems", clip: "clip", isRtl: "isRtl" }, outputs: { itemClick: "itemClick", descriptionClick: "descriptionClick", selection: "selection" }, host: { properties: { "class.clip": "this.clip", "class.rtl": "this.isRtl" } }, viewQueries: [{ propertyName: "itemListRef", first: true, predicate: ["itemList"], descendants: true, static: true }, { propertyName: "itemsRef", predicate: ["itemsRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<button\n  *ngIf=\"showPrevArrow\"\n  aria-label=\"Previous image\"\n  class=\"viewer-arrow viewer-arrow-prev\"\n  (mousedown)=\"$event.stopPropagation()\"\n  (click)=\"selectByDelta(-moveByItems)\"\n>\n  <chevron-icon *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\"></chevron-icon>\n</button>\n\n<ul #itemList [attr.aria-label]=\"aria?.viewerLabel\">\n  <li *ngIf=\"!displayedItems?.length\" class=\"viewer-initial-item\"></li>\n  <li\n    #itemsRef\n    *ngFor=\"let item of displayedItems; let i = index\"\n    media\n    [attr.tabindex]=\"itemTabbable(i)\"\n    [attr.aria-label]=\"item.alt\"\n    [attr.aria-describedby]=\"'viewer-aria-description-' + i\"\n    (click)=\"onImageClick(item, $event)\"\n    (mediaLoadError)=\"onItemErrored(item)\"\n    (keydown.Tab)=\"onTab(i + 1)\"\n    (keydown.shift.Tab)=\"onTab(i - 1)\"\n  >\n    <ng-container *ngIf=\"!itemTemplate; else customTemplate\">\n      <picture *ngIf=\"!item.video\" @mediaAnimate>\n        <source\n          *ngFor=\"let source of item.pictureSources\"\n          [srcset]=\"source.srcset\"\n          [attr.media]=\"source.media\"\n          [attr.sizes]=\"source.sizes\"\n          [attr.type]=\"source.type\"\n        />\n        <img\n          [src]=\"item.src\"\n          [alt]=\"item.alt\"\n          [attr.loading]=\"loading\"\n          [style.objectFit]=\"objectFit\"\n        />\n      </picture>\n      <!-- Using loadedmetadata instead of loadeddata because iOS loads data lazily upon user's interaction -->\n      <video\n        *ngIf=\"!isYoutube(item) && item.video\"\n        @mediaAnimate\n        [src]=\"item.src\"\n        [poster]=\"item.thumbSrc || ''\"\n        [attr.preload]=\"loading === 'lazy' ? 'metadata' : 'auto'\"\n        [style.objectFit]=\"objectFit\"\n        controls\n        playsinline\n      ></video>\n\n      <iframe\n        *ngIf=\"isYoutube(item)\"\n        @mediaAnimate\n        [attr.loading]=\"loading\"\n        [src]=\"item.src | safe\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n      ></iframe>\n    </ng-container>\n\n    <ng-container *ngIf=\"itemFailedToLoad(item)\">\n      <div\n        *ngIf=\"!errorTemplate; else $any(errorTemplate)\"\n        class=\"viewer-error\"\n      >\n        <div class=\"viewer-error-icon\">\u26A0</div>\n        <p class=\"viewer-error-text\">\n          {{ errorText || 'Loading of this media failed' }}\n        </p>\n      </div>\n    </ng-container>\n\n    <span\n      [id]=\"'viewer-aria-description-' + i\"\n      class=\"sr-only\"\n      [innerHTML]=\"item.description\"\n    ></span>\n\n    <ng-template #customTemplate>\n      <ng-container\n        *ngTemplateOutlet=\"\n          $any(itemTemplate);\n          context: {\n            index: items?.indexOf(item),\n            selectedIndex: selectedIndex,\n            item: item,\n            video: item.video\n          }\n        \"\n      ></ng-container>\n    </ng-template>\n  </li>\n</ul>\n\n<button\n  *ngIf=\"showNextArrow\"\n  aria-label=\"Next image\"\n  class=\"viewer-arrow viewer-arrow-next\"\n  (mousedown)=\"$event.stopPropagation()\"\n  (click)=\"selectByDelta(moveByItems)\"\n>\n  <chevron-icon *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\"></chevron-icon>\n</button>\n\n<counter\n  *ngIf=\"counter && items.length\"\n  [itemQuantity]=\"items.length\"\n  [selectedIndex]=\"counterIndex\"\n  [orientation]=\"counterOrientation\"\n></counter>\n\n<ng-container\n  *ngTemplateOutlet=\"\n    $any(contentTemplate);\n    context: {\n      selectedIndex: selectedIndex\n    }\n  \"\n></ng-container>\n\n<div\n  *ngIf=\"descriptions && items\"\n  class=\"viewer-description\"\n  [class.viewer-description--above-counter]=\"\n    counter && counterOrientation === 'bottom'\n  \"\n  aria-hidden=\"true\"\n>\n  <div\n    *ngIf=\"items[selectedIndex]?.description as description\"\n    class=\"viewer-description-inner\"\n    [innerHTML]=\"description\"\n    (click)=\"descriptionClick.emit($event)\"\n  ></div>\n</div>\n", styles: [":host{display:block;position:relative;width:100%;height:100%;outline:none;z-index:1}:host.clip{overflow:hidden}:host.rtl .viewer-arrow-next{right:auto;left:0;transform:translateY(-50%) scale(-1)}:host.rtl .viewer-arrow-prev{right:0;left:auto;transform:translateY(-50%)}ul{--item-width: 100%;display:flex;width:100%;height:100%;transition:transform;scrollbar-width:none}ul::-webkit-scrollbar{width:0;height:0}li{display:flex;align-items:center;flex:none;position:relative;width:var(--item-width);-webkit-user-select:none;user-select:none;outline:0}picture{width:100%;height:100%}img,video,iframe{width:100%;height:100%;background-color:transparent;outline:0;color:transparent}iframe{border:0}img{-webkit-user-select:none;user-select:none}.viewer-description{position:absolute;bottom:.5rem;width:100%;display:flex;justify-content:center;font-size:.9rem}.viewer-description--above-counter{bottom:2.5rem}.viewer-description-inner{display:inline-block;background:rgba(0,0,0,.7);color:#f1f5f9;padding:.5rem .75rem;max-width:80%;text-align:center;border-radius:.5rem}.viewer-error{position:absolute;left:0;top:0;width:100%;height:100%;display:flex;flex-flow:column nowrap;justify-content:center;align-items:center;background-color:#f5f5f5;color:#7d7d7d}.viewer-error-icon{font-size:40px}.viewer-error-text{margin-top:10px;letter-spacing:.01em}.viewer-arrow{display:flex;position:absolute;top:50%;padding:0;background-color:transparent;transform:translateY(-50%);z-index:100;cursor:pointer}.viewer-arrow-prev{left:0;transform:scale(-1) translateY(50%)}.viewer-arrow-next{right:0}.viewer-arrow chevron-icon{margin:15px 6px;opacity:.7}@media (hover: hover) and (pointer: fine){.viewer-arrow chevron-icon:hover{opacity:1}}.viewer-arrow chevron-icon::ng-deep svg{height:32px;width:32px}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: CounterComponent, selector: "counter", inputs: ["itemQuantity", "selectedIndex", "orientation"] }, { kind: "component", type: ChevronIconComponent, selector: "chevron-icon" }, { kind: "directive", type: MediaDirective, selector: "[media]", outputs: ["mediaLoadError"] }, { kind: "pipe", type: SafePipe, name: "safe" }], animations: [
            trigger('mediaAnimate', [
                transition(':leave', animate('0ms 100ms')),
                transition(':enter', [
                    style({ opacity: 0 }),
                    animate('400ms', style({ opacity: 1 })),
                ]),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: ViewerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'viewer', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('mediaAnimate', [
                            transition(':leave', animate('0ms 100ms')),
                            transition(':enter', [
                                style({ opacity: 0 }),
                                animate('400ms', style({ opacity: 1 })),
                            ]),
                        ]),
                    ], standalone: true, imports: [
                        CommonModule,
                        CounterComponent,
                        ChevronIconComponent,
                        MediaDirective,
                        SafePipe,
                    ], template: "<button\n  *ngIf=\"showPrevArrow\"\n  aria-label=\"Previous image\"\n  class=\"viewer-arrow viewer-arrow-prev\"\n  (mousedown)=\"$event.stopPropagation()\"\n  (click)=\"selectByDelta(-moveByItems)\"\n>\n  <chevron-icon *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\"></chevron-icon>\n</button>\n\n<ul #itemList [attr.aria-label]=\"aria?.viewerLabel\">\n  <li *ngIf=\"!displayedItems?.length\" class=\"viewer-initial-item\"></li>\n  <li\n    #itemsRef\n    *ngFor=\"let item of displayedItems; let i = index\"\n    media\n    [attr.tabindex]=\"itemTabbable(i)\"\n    [attr.aria-label]=\"item.alt\"\n    [attr.aria-describedby]=\"'viewer-aria-description-' + i\"\n    (click)=\"onImageClick(item, $event)\"\n    (mediaLoadError)=\"onItemErrored(item)\"\n    (keydown.Tab)=\"onTab(i + 1)\"\n    (keydown.shift.Tab)=\"onTab(i - 1)\"\n  >\n    <ng-container *ngIf=\"!itemTemplate; else customTemplate\">\n      <picture *ngIf=\"!item.video\" @mediaAnimate>\n        <source\n          *ngFor=\"let source of item.pictureSources\"\n          [srcset]=\"source.srcset\"\n          [attr.media]=\"source.media\"\n          [attr.sizes]=\"source.sizes\"\n          [attr.type]=\"source.type\"\n        />\n        <img\n          [src]=\"item.src\"\n          [alt]=\"item.alt\"\n          [attr.loading]=\"loading\"\n          [style.objectFit]=\"objectFit\"\n        />\n      </picture>\n      <!-- Using loadedmetadata instead of loadeddata because iOS loads data lazily upon user's interaction -->\n      <video\n        *ngIf=\"!isYoutube(item) && item.video\"\n        @mediaAnimate\n        [src]=\"item.src\"\n        [poster]=\"item.thumbSrc || ''\"\n        [attr.preload]=\"loading === 'lazy' ? 'metadata' : 'auto'\"\n        [style.objectFit]=\"objectFit\"\n        controls\n        playsinline\n      ></video>\n\n      <iframe\n        *ngIf=\"isYoutube(item)\"\n        @mediaAnimate\n        [attr.loading]=\"loading\"\n        [src]=\"item.src | safe\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n      ></iframe>\n    </ng-container>\n\n    <ng-container *ngIf=\"itemFailedToLoad(item)\">\n      <div\n        *ngIf=\"!errorTemplate; else $any(errorTemplate)\"\n        class=\"viewer-error\"\n      >\n        <div class=\"viewer-error-icon\">\u26A0</div>\n        <p class=\"viewer-error-text\">\n          {{ errorText || 'Loading of this media failed' }}\n        </p>\n      </div>\n    </ng-container>\n\n    <span\n      [id]=\"'viewer-aria-description-' + i\"\n      class=\"sr-only\"\n      [innerHTML]=\"item.description\"\n    ></span>\n\n    <ng-template #customTemplate>\n      <ng-container\n        *ngTemplateOutlet=\"\n          $any(itemTemplate);\n          context: {\n            index: items?.indexOf(item),\n            selectedIndex: selectedIndex,\n            item: item,\n            video: item.video\n          }\n        \"\n      ></ng-container>\n    </ng-template>\n  </li>\n</ul>\n\n<button\n  *ngIf=\"showNextArrow\"\n  aria-label=\"Next image\"\n  class=\"viewer-arrow viewer-arrow-next\"\n  (mousedown)=\"$event.stopPropagation()\"\n  (click)=\"selectByDelta(moveByItems)\"\n>\n  <chevron-icon *ngIf=\"!arrowTemplate; else $any(arrowTemplate)\"></chevron-icon>\n</button>\n\n<counter\n  *ngIf=\"counter && items.length\"\n  [itemQuantity]=\"items.length\"\n  [selectedIndex]=\"counterIndex\"\n  [orientation]=\"counterOrientation\"\n></counter>\n\n<ng-container\n  *ngTemplateOutlet=\"\n    $any(contentTemplate);\n    context: {\n      selectedIndex: selectedIndex\n    }\n  \"\n></ng-container>\n\n<div\n  *ngIf=\"descriptions && items\"\n  class=\"viewer-description\"\n  [class.viewer-description--above-counter]=\"\n    counter && counterOrientation === 'bottom'\n  \"\n  aria-hidden=\"true\"\n>\n  <div\n    *ngIf=\"items[selectedIndex]?.description as description\"\n    class=\"viewer-description-inner\"\n    [innerHTML]=\"description\"\n    (click)=\"descriptionClick.emit($event)\"\n  ></div>\n</div>\n", styles: [":host{display:block;position:relative;width:100%;height:100%;outline:none;z-index:1}:host.clip{overflow:hidden}:host.rtl .viewer-arrow-next{right:auto;left:0;transform:translateY(-50%) scale(-1)}:host.rtl .viewer-arrow-prev{right:0;left:auto;transform:translateY(-50%)}ul{--item-width: 100%;display:flex;width:100%;height:100%;transition:transform;scrollbar-width:none}ul::-webkit-scrollbar{width:0;height:0}li{display:flex;align-items:center;flex:none;position:relative;width:var(--item-width);-webkit-user-select:none;user-select:none;outline:0}picture{width:100%;height:100%}img,video,iframe{width:100%;height:100%;background-color:transparent;outline:0;color:transparent}iframe{border:0}img{-webkit-user-select:none;user-select:none}.viewer-description{position:absolute;bottom:.5rem;width:100%;display:flex;justify-content:center;font-size:.9rem}.viewer-description--above-counter{bottom:2.5rem}.viewer-description-inner{display:inline-block;background:rgba(0,0,0,.7);color:#f1f5f9;padding:.5rem .75rem;max-width:80%;text-align:center;border-radius:.5rem}.viewer-error{position:absolute;left:0;top:0;width:100%;height:100%;display:flex;flex-flow:column nowrap;justify-content:center;align-items:center;background-color:#f5f5f5;color:#7d7d7d}.viewer-error-icon{font-size:40px}.viewer-error-text{margin-top:10px;letter-spacing:.01em}.viewer-arrow{display:flex;position:absolute;top:50%;padding:0;background-color:transparent;transform:translateY(-50%);z-index:100;cursor:pointer}.viewer-arrow-prev{left:0;transform:scale(-1) translateY(50%)}.viewer-arrow-next{right:0}.viewer-arrow chevron-icon{margin:15px 6px;opacity:.7}@media (hover: hover) and (pointer: fine){.viewer-arrow chevron-icon:hover{opacity:1}}.viewer-arrow chevron-icon::ng-deep svg{height:32px;width:32px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.DestroyRef }, { type: i0.NgZone }]; }, propDecorators: { items: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], arrows: [{
                type: Input
            }], descriptions: [{
                type: Input
            }], errorText: [{
                type: Input
            }], showErrors: [{
                type: Input
            }], mouseGestures: [{
                type: Input
            }], touchGestures: [{
                type: Input
            }], counter: [{
                type: Input
            }], counterOrientation: [{
                type: Input
            }], loading: [{
                type: Input
            }], objectFit: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }], errorTemplate: [{
                type: Input
            }], arrowTemplate: [{
                type: Input
            }], contentTemplate: [{
                type: Input
            }], thumbsOrientation: [{
                type: Input
            }], aria: [{
                type: Input
            }], loop: [{
                type: Input
            }], visibleItems: [{
                type: Input
            }], moveByItems: [{
                type: Input
            }], clip: [{
                type: HostBinding,
                args: ['class.clip']
            }, {
                type: Input
            }], isRtl: [{
                type: HostBinding,
                args: ['class.rtl']
            }, {
                type: Input
            }], itemClick: [{
                type: Output
            }], descriptionClick: [{
                type: Output
            }], selection: [{
                type: Output
            }], itemListRef: [{
                type: ViewChild,
                args: ['itemList', { static: true }]
            }], itemsRef: [{
                type: ViewChildren,
                args: ['itemsRef']
            }] } });
//# sourceMappingURL=data:application/json;base64,